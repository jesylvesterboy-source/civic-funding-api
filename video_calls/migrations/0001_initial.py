# Generated by Django 5.2.7 on 2025-10-29 13:24

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('farmer_engagement', '0001_initial'),
        ('staff_performance', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='VideoCallSettings',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('organization_name', models.CharField(default='FSSS Organization', help_text='Name displayed in video call interface', max_length=200, verbose_name='Organization Name')),
                ('stun_servers', models.TextField(default='stun:stun.l.google.com:19302', help_text='STUN server URLs (one per line)', verbose_name='STUN Servers')),
                ('turn_servers', models.TextField(blank=True, help_text='TURN server URLs with credentials (one per line)', verbose_name='TURN Servers')),
                ('enable_recording', models.BooleanField(default=True, help_text='Allow call recording functionality', verbose_name='Enable Recording')),
                ('enable_screen_share', models.BooleanField(default=True, help_text='Allow screen sharing during calls', verbose_name='Enable Screen Sharing')),
                ('enable_chat', models.BooleanField(default=True, help_text='Enable real-time chat during calls', verbose_name='Enable Chat')),
                ('enable_breakout_rooms', models.BooleanField(default=False, help_text='Allow creating breakout rooms during calls', verbose_name='Enable Breakout Rooms')),
                ('require_password', models.BooleanField(default=True, help_text='Require password for all meetings by default', verbose_name='Require Meeting Password')),
                ('allow_public_meetings', models.BooleanField(default=False, help_text='Allow meetings without authentication', verbose_name='Allow Public Meetings')),
                ('max_participants_default', models.IntegerField(default=50, help_text='Default maximum participants for new meetings', verbose_name='Default Max Participants')),
                ('logo_url', models.URLField(blank=True, help_text='Organization logo displayed in video calls', verbose_name='Logo URL')),
                ('primary_color', models.CharField(default='#3B82F6', help_text='Primary brand color (hex code)', max_length=7, verbose_name='Primary Color')),
            ],
            options={
                'verbose_name': 'Video Call Settings',
                'verbose_name_plural': 'Video Call Settings',
                'db_table': 'video_calls_settings',
            },
        ),
        migrations.CreateModel(
            name='VideoCallSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(help_text='Unique identifier for the video call session', max_length=100, unique=True, verbose_name='Session ID')),
                ('title', models.CharField(help_text='Descriptive title for the video call', max_length=200, verbose_name='Call Title')),
                ('call_type', models.CharField(choices=[('staff_meeting', 'Staff Meeting'), ('farmer_training', 'Farmer Training'), ('cbo_meeting', 'CBO Virtual Meeting'), ('one_on_one', 'One-on-One Consultation'), ('emergency', 'Emergency Meeting'), ('training', 'Training Session')], max_length=50, verbose_name='Call Type')),
                ('description', models.TextField(blank=True, help_text='Purpose and agenda for the video call', verbose_name='Description')),
                ('scheduled_time', models.DateTimeField(help_text='Planned start time for the video call', verbose_name='Scheduled Time')),
                ('actual_start_time', models.DateTimeField(blank=True, null=True, verbose_name='Actual Start Time')),
                ('actual_end_time', models.DateTimeField(blank=True, null=True, verbose_name='Actual End Time')),
                ('meeting_password', models.CharField(blank=True, help_text='Optional password for meeting access', max_length=100, verbose_name='Meeting Password')),
                ('is_public', models.BooleanField(default=False, help_text='Allow anyone with link to join (without staff authentication)', verbose_name='Public Meeting')),
                ('max_participants', models.IntegerField(default=50, help_text='Maximum number of participants allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='Maximum Participants')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='scheduled', max_length=20, verbose_name='Call Status')),
                ('room_url', models.URLField(blank=True, help_text='WebRTC room URL for participants to join', verbose_name='Room URL')),
                ('is_recorded', models.BooleanField(default=False, help_text='Automatically record the video call session', verbose_name='Record Call')),
                ('recording_url', models.URLField(blank=True, help_text='URL to access the recorded session', null=True, verbose_name='Recording URL')),
                ('duration_minutes', models.IntegerField(default=0, help_text='Actual duration of the call in minutes', verbose_name='Duration (Minutes)')),
                ('co_hosts', models.ManyToManyField(blank=True, help_text='Additional staff members with host privileges', related_name='co_hosted_video_calls', to='staff_performance.staffmember', verbose_name='Co-hosts')),
                ('host', models.ForeignKey(help_text='Staff member hosting the video call', on_delete=django.db.models.deletion.CASCADE, related_name='hosted_video_calls', to='staff_performance.staffmember', verbose_name='Call Host')),
                ('related_meeting', models.ForeignKey(blank=True, help_text='Link this video call to a physical CBO meeting', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_calls', to='farmer_engagement.cbomeeting', verbose_name='Related CBO Meeting')),
                ('related_training', models.ForeignKey(blank=True, help_text='Link this video call to a training session', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_calls', to='farmer_engagement.cbotraining', verbose_name='Related Training')),
            ],
            options={
                'verbose_name': 'Video Call Session',
                'verbose_name_plural': 'Video Call Sessions',
                'db_table': 'video_calls_session',
                'ordering': ['-scheduled_time', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('file', 'File Attachment'), ('system', 'System Message'), ('announcement', 'Announcement')], default='text', max_length=20, verbose_name='Message Type')),
                ('content', models.TextField(help_text='Text content of the message', verbose_name='Message Content')),
                ('file_attachment', models.FileField(blank=True, null=True, upload_to='chat_attachments/%Y/%m/%d/', verbose_name='File Attachment')),
                ('is_pinned', models.BooleanField(default=False, help_text='Pin this message to top of chat', verbose_name='Pinned Message')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='video_calls.chatmessage', verbose_name='Reply To Message')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_chat_messages', to='staff_performance.staffmember', verbose_name='Message Sender')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='video_calls.videocallsession', verbose_name='Video Call Session')),
            ],
            options={
                'verbose_name': 'Chat Message',
                'verbose_name_plural': 'Chat Messages',
                'db_table': 'video_calls_chatmessage',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CallRecording',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(verbose_name='Recording Start Time')),
                ('end_time', models.DateTimeField(verbose_name='Recording End Time')),
                ('file_size', models.BigIntegerField(default=0, help_text='Size of the recording file in bytes', verbose_name='File Size (Bytes)')),
                ('duration_seconds', models.IntegerField(default=0, verbose_name='Duration (Seconds)')),
                ('file_url', models.URLField(help_text='URL to access the recording file', verbose_name='Recording URL')),
                ('thumbnail_url', models.URLField(blank=True, help_text='URL to recording thumbnail image', verbose_name='Thumbnail URL')),
                ('status', models.CharField(choices=[('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('deleted', 'Deleted')], default='processing', max_length=20, verbose_name='Recording Status')),
                ('is_public', models.BooleanField(default=False, help_text='Make recording publicly accessible', verbose_name='Public Recording')),
                ('download_count', models.IntegerField(default=0, help_text='Number of times recording was downloaded', verbose_name='Download Count')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='video_calls.videocallsession', verbose_name='Video Call Session')),
            ],
            options={
                'verbose_name': 'Call Recording',
                'verbose_name_plural': 'Call Recordings',
                'db_table': 'video_calls_recording',
                'ordering': ['-start_time', 'session'],
            },
        ),
        migrations.CreateModel(
            name='CallParticipant',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('host', 'Host'), ('co_host', 'Co-host'), ('presenter', 'Presenter'), ('participant', 'Participant'), ('viewer', 'Viewer')], default='participant', max_length=20, verbose_name='Participant Role')),
                ('join_time', models.DateTimeField(blank=True, help_text='Time when participant joined the call', null=True, verbose_name='Join Time')),
                ('left_at', models.DateTimeField(blank=True, help_text='Time when participant left the call', null=True, verbose_name='Left At')),
                ('user_agent', models.TextField(blank=True, help_text='Browser and device information', verbose_name='User Agent')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('connection_quality', models.DecimalField(blank=True, decimal_places=1, help_text='Average connection quality rating (0-5)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Connection Quality')),
                ('has_audio', models.BooleanField(default=True, help_text='Participant has audio capabilities', verbose_name='Audio Enabled')),
                ('has_video', models.BooleanField(default=True, help_text='Participant has video capabilities', verbose_name='Video Enabled')),
                ('can_share_screen', models.BooleanField(default=False, help_text='Participant has screen sharing permission', verbose_name='Can Share Screen')),
                ('can_chat', models.BooleanField(default=True, help_text='Participant can use chat features', verbose_name='Can Chat')),
                ('staff_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_call_participations', to='staff_performance.staffmember', verbose_name='Staff Participant')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='video_calls.videocallsession', verbose_name='Video Call Session')),
            ],
            options={
                'verbose_name': 'Call Participant',
                'verbose_name_plural': 'Call Participants',
                'db_table': 'video_calls_participant',
                'ordering': ['-join_time', 'staff_member'],
            },
        ),
        migrations.AddIndex(
            model_name='videocallsession',
            index=models.Index(fields=['session_id'], name='video_calls_session_b9178b_idx'),
        ),
        migrations.AddIndex(
            model_name='videocallsession',
            index=models.Index(fields=['host', 'scheduled_time'], name='video_calls_host_id_4cc7af_idx'),
        ),
        migrations.AddIndex(
            model_name='videocallsession',
            index=models.Index(fields=['call_type', 'status'], name='video_calls_call_ty_8c018c_idx'),
        ),
        migrations.AddIndex(
            model_name='videocallsession',
            index=models.Index(fields=['scheduled_time', 'status'], name='video_calls_schedul_823b2d_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['session', 'created_at'], name='video_calls_session_90c84a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['sender', 'created_at'], name='video_calls_sender__d740a4_idx'),
        ),
        migrations.AddIndex(
            model_name='callrecording',
            index=models.Index(fields=['session', 'start_time'], name='video_calls_session_fe4abc_idx'),
        ),
        migrations.AddIndex(
            model_name='callrecording',
            index=models.Index(fields=['status'], name='video_calls_status_c2901c_idx'),
        ),
        migrations.AddIndex(
            model_name='callparticipant',
            index=models.Index(fields=['session', 'staff_member'], name='video_calls_session_bb5dd9_idx'),
        ),
        migrations.AddIndex(
            model_name='callparticipant',
            index=models.Index(fields=['join_time', 'left_at'], name='video_calls_join_ti_dba502_idx'),
        ),
        migrations.AddIndex(
            model_name='callparticipant',
            index=models.Index(fields=['role'], name='video_calls_role_eac933_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='callparticipant',
            unique_together={('session', 'staff_member')},
        ),
    ]
