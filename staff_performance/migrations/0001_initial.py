# Generated by Django 5.2.7 on 2025-10-29 12:59

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='KeyPerformanceIndicator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the Key Performance Indicator', max_length=200, verbose_name='KPI Name')),
                ('kpi_type', models.CharField(choices=[('strategic', 'Strategic KPI'), ('operational', 'Operational KPI'), ('tactical', 'Tactical KPI')], max_length=20, verbose_name='KPI Type')),
                ('description', models.TextField(help_text='Detailed description and measurement methodology', verbose_name='Description')),
                ('department', models.CharField(choices=[('field_operations', 'Field Operations'), ('grant_management', 'Grant Management'), ('farmer_support', 'Farmer Support'), ('monitoring_evaluation', 'Monitoring & Evaluation'), ('finance_admin', 'Finance & Administration'), ('technical_services', 'Technical Services')], max_length=50, verbose_name='Responsible Department')),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Target Value')),
                ('current_value', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Current Value')),
                ('unit', models.CharField(choices=[('percentage', 'Percentage (%)'), ('count', 'Count'), ('currency', 'Currency'), ('rating', 'Rating (1-5)'), ('hours', 'Hours'), ('days', 'Days')], max_length=20, verbose_name='Unit of Measurement')),
                ('reporting_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], max_length=20, verbose_name='Reporting Frequency')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active KPI')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Key Performance Indicator',
                'verbose_name_plural': 'Key Performance Indicators',
                'db_table': 'staff_performance_kpi',
                'ordering': ['department', 'kpi_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StaffMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee_id', models.CharField(help_text='Unique staff identification number', max_length=20, unique=True, verbose_name='Employee ID')),
                ('department', models.CharField(choices=[('field_operations', 'Field Operations'), ('grant_management', 'Grant Management'), ('farmer_support', 'Farmer Support'), ('monitoring_evaluation', 'Monitoring & Evaluation'), ('finance_admin', 'Finance & Administration'), ('technical_services', 'Technical Services')], help_text='Primary department assignment', max_length=50, verbose_name='Department')),
                ('position_title', models.CharField(help_text='Official job title', max_length=100, verbose_name='Position Title')),
                ('position_level', models.CharField(choices=[('entry', 'Entry Level'), ('officer', 'Field Officer'), ('supervisor', 'Supervisor'), ('manager', 'Manager'), ('director', 'Director')], max_length=20, verbose_name='Position Level')),
                ('hire_date', models.DateField(help_text='Date staff joined organization', verbose_name='Hire Date')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether staff is currently active', verbose_name='Active Status')),
                ('overall_performance_score', models.DecimalField(decimal_places=2, default=0, help_text='Aggregated performance score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Overall Performance Score')),
                ('last_performance_review', models.DateField(blank=True, null=True, verbose_name='Last Performance Review')),
                ('work_phone', models.CharField(blank=True, max_length=20, verbose_name='Work Phone')),
                ('work_email', models.EmailField(blank=True, max_length=254, verbose_name='Work Email')),
                ('assigned_region', models.CharField(blank=True, help_text='Primary geographical area of responsibility', max_length=100, verbose_name='Assigned Region')),
                ('supervisor', models.ForeignKey(blank=True, help_text='Immediate supervisor for performance reviews', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='staff_performance.staffmember', verbose_name='Direct Supervisor')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL, verbose_name='System User')),
            ],
            options={
                'verbose_name': 'Staff Member',
                'verbose_name_plural': 'Staff Members',
                'db_table': 'staff_performance_staffmember',
                'ordering': ['department', 'position_level', 'user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='StaffAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achievement_type', models.CharField(choices=[('award', 'Award'), ('certification', 'Certification'), ('completion', 'Training Completion'), ('innovation', 'Innovation'), ('excellence', 'Excellence Recognition'), ('milestone', 'Milestone Achievement')], max_length=20, verbose_name='Achievement Type')),
                ('title', models.CharField(max_length=200, verbose_name='Achievement Title')),
                ('description', models.TextField(help_text='Detailed description of the achievement', verbose_name='Description')),
                ('date_achieved', models.DateField(verbose_name='Date Achieved')),
                ('recognizing_organization', models.CharField(blank=True, max_length=200, verbose_name='Recognizing Organization')),
                ('certificate_url', models.URLField(blank=True, help_text='Link to digital certificate or document', verbose_name='Certificate URL')),
                ('impact_description', models.TextField(blank=True, help_text='How this achievement benefited the organization', verbose_name='Impact Description')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='staff_performance.staffmember', verbose_name='Staff Member')),
            ],
            options={
                'verbose_name': 'Staff Achievement',
                'verbose_name_plural': 'Staff Achievements',
                'db_table': 'staff_performance_achievement',
                'ordering': ['-date_achieved', 'staff'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review_type', models.CharField(choices=[('probation', 'Probation Review'), ('quarterly', 'Quarterly Review'), ('mid_year', 'Mid-Year Review'), ('annual', 'Annual Review'), ('promotion', 'Promotion Review'), ('special', 'Special Review')], max_length=20, verbose_name='Review Type')),
                ('review_period_start', models.DateField(verbose_name='Review Period Start')),
                ('review_period_end', models.DateField(verbose_name='Review Period End')),
                ('review_date', models.DateField(default=django.utils.timezone.now, verbose_name='Review Date')),
                ('work_quality_rating', models.IntegerField(choices=[(1, '1 - Unsatisfactory'), (2, '2 - Needs Improvement'), (3, '3 - Meets Expectations'), (4, '4 - Exceeds Expectations'), (5, '5 - Outstanding')], verbose_name='Work Quality Rating')),
                ('productivity_rating', models.IntegerField(choices=[(1, '1 - Unsatisfactory'), (2, '2 - Needs Improvement'), (3, '3 - Meets Expectations'), (4, '4 - Exceeds Expectations'), (5, '5 - Outstanding')], verbose_name='Productivity Rating')),
                ('communication_rating', models.IntegerField(choices=[(1, '1 - Unsatisfactory'), (2, '2 - Needs Improvement'), (3, '3 - Meets Expectations'), (4, '4 - Exceeds Expectations'), (5, '5 - Outstanding')], verbose_name='Communication Rating')),
                ('teamwork_rating', models.IntegerField(choices=[(1, '1 - Unsatisfactory'), (2, '2 - Needs Improvement'), (3, '3 - Meets Expectations'), (4, '4 - Exceeds Expectations'), (5, '5 - Outstanding')], verbose_name='Teamwork Rating')),
                ('initiative_rating', models.IntegerField(choices=[(1, '1 - Unsatisfactory'), (2, '2 - Needs Improvement'), (3, '3 - Meets Expectations'), (4, '4 - Exceeds Expectations'), (5, '5 - Outstanding')], verbose_name='Initiative Rating')),
                ('overall_rating', models.DecimalField(decimal_places=2, help_text='Average of all rating categories', max_digits=3, verbose_name='Overall Rating')),
                ('strengths', models.TextField(help_text='Areas where staff excels', verbose_name='Key Strengths')),
                ('development_areas', models.TextField(help_text='Areas needing improvement', verbose_name='Development Areas')),
                ('goals_next_period', models.TextField(help_text='Specific, measurable goals for next review period', verbose_name='Goals for Next Period')),
                ('recommendations', models.TextField(blank=True, help_text='Specific recommendations for development', verbose_name='Recommendations')),
                ('follow_up_date', models.DateField(blank=True, null=True, verbose_name='Follow-up Date')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Review Completed')),
                ('staff_comments', models.TextField(blank=True, help_text='Staff member feedback on the review', verbose_name='Staff Comments')),
                ('reviewer', models.ForeignKey(help_text='Staff member conducting the review', on_delete=django.db.models.deletion.CASCADE, related_name='conducted_reviews', to='staff_performance.staffmember', verbose_name='Reviewer')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_reviews', to='staff_performance.staffmember', verbose_name='Staff Member')),
            ],
            options={
                'verbose_name': 'Performance Review',
                'verbose_name_plural': 'Performance Reviews',
                'db_table': 'staff_performance_review',
                'ordering': ['-review_date', 'staff'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric_name', models.CharField(help_text='Name of the performance metric being tracked', max_length=100, verbose_name='Metric Name')),
                ('metric_category', models.CharField(choices=[('productivity', 'Productivity'), ('quality', 'Quality of Work'), ('efficiency', 'Efficiency'), ('farmer_engagement', 'Farmer Engagement'), ('grant_management', 'Grant Management'), ('reporting', 'Reporting & Documentation'), ('teamwork', 'Teamwork & Collaboration'), ('innovation', 'Innovation & Initiative')], max_length=50, verbose_name='Metric Category')),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this metric measures', verbose_name='Description')),
                ('target_value', models.DecimalField(decimal_places=2, help_text='Expected target value for this metric', max_digits=10, verbose_name='Target Value')),
                ('actual_value', models.DecimalField(decimal_places=2, help_text='Actual achieved value', max_digits=10, verbose_name='Actual Value')),
                ('unit', models.CharField(choices=[('percentage', 'Percentage (%)'), ('count', 'Count'), ('currency', 'Currency'), ('rating', 'Rating (1-5)'), ('hours', 'Hours'), ('days', 'Days')], max_length=20, verbose_name='Unit of Measurement')),
                ('period_start', models.DateField(help_text='Start date of measurement period', verbose_name='Period Start')),
                ('period_end', models.DateField(help_text='End date of measurement period', verbose_name='Period End')),
                ('achievement_rate', models.DecimalField(decimal_places=2, default=0, help_text='Percentage of target achieved', max_digits=5, verbose_name='Achievement Rate (%)')),
                ('weight', models.DecimalField(decimal_places=2, default=100, help_text='Importance weight in overall performance calculation', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Weight (%)')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='staff_performance.staffmember', verbose_name='Staff Member')),
            ],
            options={
                'verbose_name': 'Performance Metric',
                'verbose_name_plural': 'Performance Metrics',
                'db_table': 'staff_performance_metric',
                'ordering': ['staff', '-period_end', 'metric_category'],
            },
        ),
        migrations.CreateModel(
            name='TrainingDevelopment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('training_title', models.CharField(max_length=200, verbose_name='Training Title')),
                ('training_type', models.CharField(choices=[('technical', 'Technical Skills'), ('soft_skills', 'Soft Skills'), ('management', 'Management & Leadership'), ('compliance', 'Compliance & Regulations'), ('technology', 'Technology & Systems'), ('sector_specific', 'Sector Specific')], max_length=20, verbose_name='Training Type')),
                ('provider', models.CharField(max_length=200, verbose_name='Training Provider')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('duration_hours', models.IntegerField(help_text='Total training hours', verbose_name='Duration (Hours)')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20, verbose_name='Training Status')),
                ('completion_certificate', models.URLField(blank=True, verbose_name='Completion Certificate URL')),
                ('skills_acquired', models.TextField(blank=True, help_text='Key skills and knowledge gained', verbose_name='Skills Acquired')),
                ('training_rating', models.IntegerField(blank=True, choices=[(1, '1 - Unsatisfactory'), (2, '2 - Needs Improvement'), (3, '3 - Meets Expectations'), (4, '4 - Exceeds Expectations'), (5, '5 - Outstanding')], help_text='Staff rating of training quality', null=True, verbose_name='Training Rating')),
                ('application_plan', models.TextField(blank=True, help_text='How skills will be applied in work', verbose_name='Application Plan')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainings', to='staff_performance.staffmember', verbose_name='Staff Member')),
            ],
            options={
                'verbose_name': 'Training & Development',
                'verbose_name_plural': 'Trainings & Development',
                'db_table': 'staff_performance_training',
                'ordering': ['-start_date', 'staff'],
            },
        ),
        migrations.AddIndex(
            model_name='staffmember',
            index=models.Index(fields=['department', 'is_active'], name='staff_perfo_departm_df0b57_idx'),
        ),
        migrations.AddIndex(
            model_name='staffmember',
            index=models.Index(fields=['position_level'], name='staff_perfo_positio_a17a81_idx'),
        ),
        migrations.AddIndex(
            model_name='staffmember',
            index=models.Index(fields=['overall_performance_score'], name='staff_perfo_overall_290331_idx'),
        ),
        migrations.AddIndex(
            model_name='staffachievement',
            index=models.Index(fields=['staff', 'achievement_type'], name='staff_perfo_staff_i_5fd724_idx'),
        ),
        migrations.AddIndex(
            model_name='performancereview',
            index=models.Index(fields=['staff', 'review_date'], name='staff_perfo_staff_i_030413_idx'),
        ),
        migrations.AddIndex(
            model_name='performancereview',
            index=models.Index(fields=['review_type', 'is_completed'], name='staff_perfo_review__615ceb_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['staff', 'period_end'], name='staff_perfo_staff_i_adc4ce_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['metric_category'], name='staff_perfo_metric__27b00b_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['achievement_rate'], name='staff_perfo_achieve_f64f06_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='performancemetric',
            unique_together={('staff', 'metric_name', 'period_end')},
        ),
        migrations.AddIndex(
            model_name='trainingdevelopment',
            index=models.Index(fields=['staff', 'status'], name='staff_perfo_staff_i_a4ebe4_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingdevelopment',
            index=models.Index(fields=['training_type'], name='staff_perfo_trainin_2cc222_idx'),
        ),
    ]
