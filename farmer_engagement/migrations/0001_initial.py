# Generated by Django 5.2.7 on 2025-10-29 13:12

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('farmers', '0003_add_location_to_farmplot'),
        ('staff_performance', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CBOGroup',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Official name of the community-based organization', max_length=200, verbose_name='CBO Name')),
                ('group_type', models.CharField(choices=[('farmer_cooperative', 'Farmer Cooperative'), ('producer_group', 'Producer Group'), ('savings_group', 'Savings & Credit Group'), ('marketing_group', 'Marketing Group'), ('processing_group', 'Processing Group'), ('women_group', "Women's Group"), ('youth_group', 'Youth Group')], max_length=50, verbose_name='Group Type')),
                ('registration_number', models.CharField(blank=True, help_text='Official registration number if registered', max_length=100, verbose_name='Registration Number')),
                ('village', models.CharField(max_length=100, verbose_name='Village')),
                ('parish', models.CharField(max_length=100, verbose_name='Parish')),
                ('sub_county', models.CharField(max_length=100, verbose_name='Sub-County')),
                ('district', models.CharField(max_length=100, verbose_name='District')),
                ('gps_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='GPS Latitude')),
                ('gps_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='GPS Longitude')),
                ('formation_date', models.DateField(help_text='Date when the group was officially formed', verbose_name='Formation Date')),
                ('status', models.CharField(choices=[('forming', 'Forming'), ('active', 'Active'), ('inactive', 'Inactive'), ('dormant', 'Dormant'), ('dissolved', 'Dissolved')], default='active', max_length=20, verbose_name='Group Status')),
                ('total_members', models.IntegerField(default=0, help_text='Current number of registered members', verbose_name='Total Members')),
                ('female_members', models.IntegerField(default=0, help_text='Number of female members', verbose_name='Female Members')),
                ('male_members', models.IntegerField(default=0, help_text='Number of male members', verbose_name='Male Members')),
                ('chairperson_name', models.CharField(blank=True, max_length=100, verbose_name='Chairperson Name')),
                ('chairperson_phone', models.CharField(blank=True, max_length=20, verbose_name='Chairperson Phone')),
                ('secretary_name', models.CharField(blank=True, max_length=100, verbose_name='Secretary Name')),
                ('treasurer_name', models.CharField(blank=True, max_length=100, verbose_name='Treasurer Name')),
                ('assigned_staff', models.ForeignKey(blank=True, help_text='Staff member responsible for this CBO', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_cbo_groups', to='staff_performance.staffmember', verbose_name='Assigned Staff')),
            ],
            options={
                'verbose_name': 'CBO Group',
                'verbose_name_plural': 'CBO Groups',
                'db_table': 'farmer_engagement_cbogroup',
                'ordering': ['name', 'district'],
            },
        ),
        migrations.CreateModel(
            name='CBOMeeting',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('meeting_type', models.CharField(choices=[('regular', 'Regular Meeting'), ('special', 'Special Meeting'), ('training', 'Training Session'), ('planning', 'Planning Meeting'), ('election', 'Election Meeting'), ('emergency', 'Emergency Meeting')], default='regular', max_length=20, verbose_name='Meeting Type')),
                ('title', models.CharField(help_text='Descriptive title for the meeting', max_length=200, verbose_name='Meeting Title')),
                ('agenda', models.TextField(help_text='Detailed agenda items to be discussed', verbose_name='Meeting Agenda')),
                ('objectives', models.TextField(blank=True, help_text='Specific objectives for this meeting', verbose_name='Meeting Objectives')),
                ('meeting_date', models.DateTimeField(verbose_name='Meeting Date & Time')),
                ('venue', models.CharField(help_text='Physical location of the meeting', max_length=200, verbose_name='Meeting Venue')),
                ('gps_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Venue GPS Latitude')),
                ('gps_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Venue GPS Longitude')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('postponed', 'Postponed')], default='scheduled', max_length=20, verbose_name='Meeting Status')),
                ('expected_attendance', models.IntegerField(default=0, help_text='Number of members expected to attend', verbose_name='Expected Attendance')),
                ('actual_attendance', models.IntegerField(default=0, help_text='Number of members who actually attended', verbose_name='Actual Attendance')),
                ('qr_code', models.ImageField(blank=True, help_text='QR code for digital attendance tracking', null=True, upload_to='meeting_qrcodes/', verbose_name='QR Code')),
                ('minutes', models.TextField(blank=True, help_text='Detailed minutes and resolutions', verbose_name='Meeting Minutes')),
                ('action_points', models.TextField(blank=True, help_text='Specific actions agreed upon with responsibilities', verbose_name='Action Points')),
                ('next_meeting_date', models.DateTimeField(blank=True, null=True, verbose_name='Next Meeting Date')),
                ('cbo_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='farmer_engagement.cbogroup', verbose_name='CBO Group')),
                ('co_facilitator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='co_facilitated_meetings', to='staff_performance.staffmember', verbose_name='Co-Facilitator')),
                ('facilitator', models.ForeignKey(help_text='Staff member facilitating the meeting', on_delete=django.db.models.deletion.CASCADE, related_name='facilitated_meetings', to='staff_performance.staffmember', verbose_name='Facilitator')),
            ],
            options={
                'verbose_name': 'CBO Meeting',
                'verbose_name_plural': 'CBO Meetings',
                'db_table': 'farmer_engagement_cbomeeting',
                'ordering': ['-meeting_date', 'cbo_group'],
            },
        ),
        migrations.CreateModel(
            name='CBOTraining',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Training Title')),
                ('training_category', models.CharField(choices=[('agricultural', 'Agricultural Practices'), ('financial', 'Financial Literacy'), ('leadership', 'Leadership & Governance'), ('marketing', 'Marketing & Value Addition'), ('climate', 'Climate Smart Agriculture'), ('technology', 'Technology Adoption'), ('other', 'Other')], max_length=50, verbose_name='Training Category')),
                ('description', models.TextField(verbose_name='Training Description')),
                ('objectives', models.TextField(verbose_name='Training Objectives')),
                ('start_date', models.DateTimeField(verbose_name='Start Date & Time')),
                ('end_date', models.DateTimeField(verbose_name='End Date & Time')),
                ('venue', models.CharField(max_length=200, verbose_name='Training Venue')),
                ('total_participants', models.IntegerField(default=0, verbose_name='Total Participants')),
                ('training_materials', models.TextField(blank=True, verbose_name='Training Materials Used')),
                ('evaluation_score', models.DecimalField(blank=True, decimal_places=2, help_text='Average evaluation score from participants (1-5)', max_digits=5, null=True, verbose_name='Evaluation Score')),
                ('cbo_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainings', to='farmer_engagement.cbogroup', verbose_name='CBO Group')),
                ('facilitator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducted_trainings', to='staff_performance.staffmember', verbose_name='Facilitator')),
                ('resource_persons', models.ManyToManyField(blank=True, related_name='assisted_trainings', to='staff_performance.staffmember', verbose_name='Resource Persons')),
            ],
            options={
                'verbose_name': 'CBO Training',
                'verbose_name_plural': 'CBO Trainings',
                'db_table': 'farmer_engagement_training',
                'ordering': ['-start_date', 'cbo_group'],
            },
        ),
        migrations.CreateModel(
            name='FarmerAttendance',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attendance_status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused')], default='present', max_length=20, verbose_name='Attendance Status')),
                ('check_in_time', models.DateTimeField(blank=True, help_text='Actual time when farmer checked in', null=True, verbose_name='Check-in Time')),
                ('check_out_time', models.DateTimeField(blank=True, help_text='Time when farmer checked out (if applicable)', null=True, verbose_name='Check-out Time')),
                ('checkin_method', models.CharField(choices=[('qr_code', 'QR Code Scan'), ('manual', 'Manual Entry'), ('biometric', 'Biometric'), ('nfc', 'NFC Tag')], default='manual', max_length=20, verbose_name='Check-in Method')),
                ('notes', models.TextField(blank=True, help_text='Any additional notes about attendance', verbose_name='Attendance Notes')),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='farmers.farmer', verbose_name='Farmer')),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='farmer_engagement.cbomeeting', verbose_name='CBO Meeting')),
                ('verified_by', models.ForeignKey(blank=True, help_text='Staff member who verified the attendance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='staff_performance.staffmember', verbose_name='Verified By')),
            ],
            options={
                'verbose_name': 'Farmer Attendance',
                'verbose_name_plural': 'Farmer Attendances',
                'db_table': 'farmer_engagement_attendance',
                'ordering': ['-check_in_time', 'farmer'],
            },
        ),
        migrations.CreateModel(
            name='MeetingDocument',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('attendance_list', 'Attendance List'), ('minutes', 'Meeting Minutes'), ('presentation', 'Presentation Slides'), ('photo', 'Meeting Photo'), ('resolution', 'Resolution Document'), ('other', 'Other Document')], max_length=20, verbose_name='Document Type')),
                ('title', models.CharField(max_length=200, verbose_name='Document Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('file', models.FileField(upload_to='meeting_documents/%Y/%m/%d/', verbose_name='Document File')),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='farmer_engagement.cbomeeting', verbose_name='CBO Meeting')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staff_performance.staffmember', verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Meeting Document',
                'verbose_name_plural': 'Meeting Documents',
                'db_table': 'farmer_engagement_document',
                'ordering': ['-created_at', 'meeting'],
            },
        ),
        migrations.AddIndex(
            model_name='cbogroup',
            index=models.Index(fields=['group_type', 'status'], name='farmer_enga_group_t_fd7482_idx'),
        ),
        migrations.AddIndex(
            model_name='cbogroup',
            index=models.Index(fields=['district', 'sub_county'], name='farmer_enga_distric_b48051_idx'),
        ),
        migrations.AddIndex(
            model_name='cbogroup',
            index=models.Index(fields=['assigned_staff'], name='farmer_enga_assigne_3bde25_idx'),
        ),
        migrations.AddIndex(
            model_name='cbomeeting',
            index=models.Index(fields=['cbo_group', 'meeting_date'], name='farmer_enga_cbo_gro_ab00da_idx'),
        ),
        migrations.AddIndex(
            model_name='cbomeeting',
            index=models.Index(fields=['meeting_type', 'status'], name='farmer_enga_meeting_1a3464_idx'),
        ),
        migrations.AddIndex(
            model_name='cbomeeting',
            index=models.Index(fields=['facilitator', 'meeting_date'], name='farmer_enga_facilit_e3841b_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerattendance',
            index=models.Index(fields=['farmer', 'meeting'], name='farmer_enga_farmer__bb3fa4_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerattendance',
            index=models.Index(fields=['meeting', 'attendance_status'], name='farmer_enga_meeting_f70249_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerattendance',
            index=models.Index(fields=['check_in_time'], name='farmer_enga_check_i_096a53_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='farmerattendance',
            unique_together={('farmer', 'meeting')},
        ),
    ]
